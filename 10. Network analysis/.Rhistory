gl_speech_op(demo)
gl_speech_op(demo)
gl_speech_op(demo)
gl_speech_op(demo)
gl_speech_op(demo)
gl_speech_op(demo)
gl_speech_op(demo)
gl_speech_op(demo)
gl_speech_op(demo)
gl_speech_op(demo)
gl_speech_op(demo)
gl_speech_op(demo)
gl_speech_op(demo)
gl_speech_op(demo)
gl_speech_op(demo)
gl_speech_op(demo)
gl_speech_op(demo)
gl_speech_op(demo)
gl_speech_op(demo)
gl_speech_op(demo)
gl_speech_op(demo)
gl_speech_op(demo)
audio <- gl_speech_op(demo)
audio <- audio$transcript
saveRDS(audio, file = paste0(route, "\\Texto\\lascayenas_feb27.rds"))
demo <- gl_speech("gs://audios_barranquilla/lasgardenias_feb28.wav", async = TRUE, sampleRateHertz = 48000L, languageCode = "es-CO")
gl_speech_op(demo)
gl_speech_op(demo)
gl_speech_op(demo)
gl_speech_op(demo)
gl_speech_op(demo)
gl_speech_op(demo)
gl_speech_op(demo)
gl_speech_op(demo)
gl_speech_op(demo)
gl_speech_op(demo)
gl_speech_op(demo)
gl_speech_op(demo)
gl_speech_op(demo)
gl_speech_op(demo)
gl_speech_op(demo)
gl_speech_op(demo)
gl_speech_op(demo)
gl_speech_op(demo)
gl_speech_op(demo)
gl_speech_op(demo)
gl_speech_op(demo)
gl_speech_op(demo)
gl_speech_op(demo)
gl_speech_op(demo)
gl_speech_op(demo)
gl_speech_op(demo)
audio <- gl_speech_op(demo)
audio <- audio$transcript
saveRDS(audio, file = paste0(route, "\\Texto\\lasgardenias_feb28.rds"))
demo <- gl_speech("gs://audios_barranquilla/laspalmas_feb5_1.wav", async = TRUE, sampleRateHertz = 48000L, languageCode = "es-CO")
demo <- gl_speech("gs://audios_barranquilla/laspalmas_feb5_1.wav", async = TRUE, sampleRateHertz = 44100L, languageCode = "es-CO")
demo <- gl_speech("gs://audios_barranquilla/laspalmas_feb5_1.wav", async = TRUE, sampleRateHertz = 44100L, languageCode = "es-CO")
gl_speech_op(demo)
gl_speech_op(demo)
gl_speech_op(demo)
gl_speech_op(demo)
audio <- gl_speech_op(demo)
audio <- audio$transcript
saveRDS(audio, file = paste0(route, "\\Texto\\laspalmas_feb5_1.rds"))
demo <- gl_speech("gs://audios_barranquilla/laspalmas_feb5_2.wav", async = TRUE, sampleRateHertz = 44100L, languageCode = "es-CO")
gl_speech_op(demo)
demo <- gl_speech("gs://audios_barranquilla/laspalmas_feb5_2.wav", async = TRUE, sampleRateHertz = 44100L, languageCode = "es-CO")
gl_speech_op(demo)
gl_speech_op(demo)
gl_speech_op(demo)
gl_speech_op(demo)
audio <- gl_speech_op(demo)
audio <- audio$transcript
saveRDS(audio, file = paste0(route, "\\Texto\\laspalmas_feb5_2.rds"))
demo <- gl_speech("gs://audios_barranquilla/laspalmas_feb5_3.wav", async = TRUE, sampleRateHertz = 44100L, languageCode = "es-CO")
gl_speech_op(demo)
gl_speech_op(demo)
audio <- gl_speech_op(demo)
audio <- audio$transcript
saveRDS(audio, file = paste0(route, "\\Texto\\laspalmas_feb5_3.rds"))
demo <- gl_speech("gs://audios_barranquilla/simonbolivar_feb3_1.wav", async = TRUE, sampleRateHertz = 44100L, languageCode = "es-CO")
gl_speech_op(demo)
gl_speech_op(demo)
gl_speech_op(demo)
gl_speech_op(demo)
gl_speech_op(demo)
gl_speech_op(demo)
audio <- gl_speech_op(demo)
audio <- audio$transcript
saveRDS(audio, file = paste0(route, "\\Texto\\simonbolivar_feb3_1.rds"))
demo <- gl_speech("gs://audios_barranquilla/simonbolivar_feb3_2.wav", async = TRUE, sampleRateHertz = 44100L, languageCode = "es-CO")
gl_speech_op(demo)
gl_speech_op(demo)
audio <- gl_speech_op(demo)
audio <- audio$transcript
saveRDS(audio, file = paste0(route, "\\Texto\\simonbolivar_feb3_2.rds"))
library(rvest)
library(stringr)
url <- "https://ejatlas.org/country/colombia"
html <- read_html(url)
div <- html_nodes(html, 'div')
div[1:10]
div[11:20]
class <- html_nodes(html, ',content')
class <- html_nodes(html, '.content')
class
href <- html_attrs(class[2], 'href')
class[2]
table <- html_nodes(class, header = TRUE)
table <- html_table(class, header = TRUE)
table <- html_text(class)
table
class <- html_nodes(html, '.recent')
class
class <- html_nodes(html, '.content')
class <- html_nodes(html, '.clearfix')
class
class <- html_nodes(html, '.exp')
class <- html_nodes(html, '.block conflict-button')
install.packages("RSelenium")
library(RSelenium)
library(RSelenium)
library(rvest)
library(stringr)
url <- "https://ejatlas.org/country/colombia"
driver <- rsDriver(browser=c("chrome"))
remote_driver <- driver[["client"]]
remote_driver$open()
driver <- rsDriver(browser=c("chrome"))
remote_driver <- driver[["client"]]
remote_driver$open()
errorDetails
library(RSelenium)
library(rvest)
library(stringr)
url <- "https://ejatlas.org/country/colombia"
driver <- rsDriver(browser=c("chrome"))
driver <- rsDriver(browser=c("chrome"))
library(haven)
cuentas <- read_dta("C:/Users/juanf/Dropbox/DNP - OIM/Conflictividades/Datos/cuentas.dta")
View(cuentas)
cuentas$cuenta <- tolower(cuentas$cuenta)
View(cuentas)
library(stringr)
cuentas$cuenta <- str_replace_all(cuentas$cuenta, " ", "_")
View(cuentas)
library(reshape2)
cuentas1 <- dcast(cuentas, codmpio + nombrempio + year ~ cuenta)
View(cuentas1)
View(cuentas1)
write.dta(cuentas1, "C:/Users/juanf/Dropbox/DNP - OIM/Conflictividades/Datos/cuentas1.dta")
library(foreign)
write.dta(cuentas1, "C:/Users/juanf/Dropbox/DNP - OIM/Conflictividades/Datos/cuentas1.dta")
install.packages("devtools")
install.packages("Rfacebook")
knitr::opts_chunk$set(echo = TRUE)
#install.packages("devtools")
#install.packages("Rfacebook")
library(devtools)
library(Rfacebook)
library(tidyverse)
library(MASS)
houses <- Boston
View(houses)
View(houses)
houses <- Boston
str(houses)
set.seed (123)
train = sample(1:nrow(houses), nrow(houses)/2)
test = (-train)
y_test= medv[test]
set.seed (123)
train = sample(1:nrow(houses), nrow(houses)/2)
test = (-train)
y_test= test$medv
View(houses)
set.seed (123)
train = sample(1:nrow(houses), nrow(houses)/2)
test = (-train)
y_test= y[test]
View(houses)
View(houses)
View(houses)
View(houses)
matrix <- model.matrix(medv ~ ., houses)
View(matrix)
View(matrix)
set.seed (123)
train = sample(1:nrow(houses), nrow(houses)/2)
test = (-train)
y_test= y[test]
set.seed (123)
train = sample(1:nrow(houses), nrow(houses)/2)
test = (-train)
y_test= medv[test]
matrix <- model.matrix(medv ~ ., houses)
y <- houses$medv
set.seed (123)
train = sample(1:nrow(houses), nrow(houses)/2)
test = (-train)
y_test= y[test]
matrix <- model.matrix(medv ~ ., houses)[, -1]
y <- houses$medv
set.seed (123)
train = sample(1:nrow(houses), nrow(houses)/2)
test = (-train)
y_test= y[test]
ridge <- glmnet(x, y, alpha=0, lambda = NULL)
install.packages("glmnet")
#install.packages("glmnet")
library(glmnet)
ridge <- glmnet(x, y, alpha=0, lambda = NULL)
ridge <- glmnet(matrix, y, alpha=0, lambda = NULL)
linear_ridge <- glmnet(matrix, y, alpha=0, lambda = NULL)
coef(linear_ridge)
is.na(houses)
sum(is.na(houses$medv))
grid=10^seq(10,-2,length=100)
grid[1]
linear_ridge <- glmnet(matrix, y, alpha=0, lambda = NULL)
linear_ridge <- glmnet(matrix[train,], y[train], alpha=0, lambda = grid)
plot(linear_ridge)
plot(linear_ridge, xvar = lambda)
plot(linear_ridge, xvar = "lambda")
ridge <- glmnet(matrix[train,], y[train], alpha=0, lambda = grid)
plot(ridge, xvar = "lambda")
cv_ridge <- cv.glmnet(matrix[train,], y[train], alpha=0)
plot(cv_ridge)
cv$lambda.min
cv_ridge$lambda.min
lambda_optimo <- cv_ridge$lambda.min
lambda_optimo
prediccion <- predict(cv_ridge,s=bestlam,type="coefficients")
prediccion <- predict(cv_ridge,s=lambda_optimo, type="coefficients")
RMSE(predicciones, y_test)
prediccion <- predict(cv_ridge,s=lambda_optimo, type="coefficients")
coef(prediccion)
op_ridge <- glmnet(matrix[train,], y[train], alpha=0, lambda = lambda_optimo)
coef(op_ridge)
predictions <- predict(op_ridge, matrix[-train])
predictions <- predict(op_ridge, matrix[-train])
predictions <- predict(op_ridge, test)
predictions <- predict(op_ridge, matrix[test])
predictions <- predict(op_ridge, matrix[test,])
RMSE(predictions, y_test)
postResample(predictions, y_test)
library(caret)
install.packages("caret")
#install.packages("caret")
library(caret)
postResample(predictions, y_test)
#install.packages("caret")
library(caret)
RMSE(predictions, y_test)
lasso <- glmnet(matrix[train,], y[train], alpha=1, lambda = grid)
plot(lasso, xvar = "lambda")
cv_lasso <- cv.glmnet(matrix[train,], y[train], alpha=1)
plot(cv_lasso)
lambda_optimo <- cv_lasso$lambda.min
lambda_optimo
op_lasso <- glmnet(matrix[train,], y[train], alpha=0, lambda = lambda_optimo)
coef(op_lasso)
predictions <- predict(op_lasso, matrix[test,])
predictions_lasso <- predict(op_lasso, matrix[test,])
#install.packages("caret")
library(caret)
RMSE(predictions_lasso, y_test)
predictions <- predict(op_ridge, matrix[test,])
#install.packages("caret")
library(caret)
RMSE(predictions, y_test)
models <- list(ridge = op_ridge, lasso = op_lasso)
summary(resamples(models) , metric = "RMSE")
hist(houses$medv)
set.seed(123)
train_sample <- sample(houses, nrow(houses)*0.8)
set.seed(123)
train_sample <- sample(nrow(houses), nrow(houses)*0.8)
house_train <- houses[train_sample,]
house_test <- houses[-train_sample,]
install.packages("rpart")
install.packages("rpart")
knitr::opts_chunk$set(echo = TRUE)
#install.packages("rpart")
library(rpart)
model_train <- rpart(medv ~ ., data = houses)
model_train
View(houses)
View(houses)
rpart.plot(model_train)
library(rpart.plot)
install.packages("rpart.plot")
#install.packages("rpart.plot")
library(rpart.plot)
rpart.plot(model_train)
plotcp(model_train)
completo <- rpart(medv ~ .,data = houses,  control = list(cp = 0))
plotcp(completo)
arbol_predict <- predict(model_train, house_test)
MAE <- function(actual, predicted){
mean(abs(actual-predicted))
}
MAE(arbol_predict, house_test$medv)
MAE(house_test$medv, arbol_predict,)
MAE(house_test$medv, arbol_predict)
library(readxl)
X2001_Base_Eventos_por_minas <- read_excel("C:/Users/juanf/Dropbox/DNP - OIM/Conflictividades/Datos/2001-Base-Eventos-por-minas.xlsx")
View(X2001_Base_Eventos_por_minas)
minas <- read_excel("C:/Users/juanf/Dropbox/DNP - OIM/Conflictividades/Datos/2001-Base-Eventos-por-minas.xlsx")
View(minas)
View(minas)
minas$`Tipo de evento` <- tolower(minas$`Tipo de evento`)
View(minas)
minas <- minas[, -c("sitio", "latitude", "longitude", "Tipo de lugar", "Tipo de area")]
minas <- minas[, -minas[c("sitio", "latitude", "longitude", "Tipo de lugar", "Tipo de area")]]
minas <- minas[, -c(4, 7, 8, 11, 12)]
View(minas)
library(reshape2)
library(stringr)
library(haven)
library(foreign)
library(readxl)
minas1 <- dcast(`Tipo de evento`, departamento + municipio + mes + Año + cod_dane_depto + cod_dane_muni ~ evento)
minas1 <- dcast(minas, departamento + municipio + mes + Año + cod_dane_depto + cod_dane_muni ~ `Tipo de evento`)
View(minas1)
write.dta(minas1, "C:/Users/juanf/Dropbox/DNP - OIM/Conflictividades/Datos/map.dta")
colnames(minas1)
colnames(minas1) <- c("nombredepto", "nombrempio", "mes", "year", "coddepto", "codmpio", "accidente_map",
"accidente_muse", "arsenal_almacenada", "desminado_militar", "incautaciones",
"municiones_sinexplotar", "produccion_fabrica", "sospecha_campominado")
View(minas1)
write.dta(minas1, "C:/Users/juanf/Dropbox/DNP - OIM/Conflictividades/Datos/map.dta")
minas <- read_excel("C:/Users/juanf/Dropbox/DNP - OIM/Conflictividades/Datos/2001-Base-Eventos-por-minas.xlsx")
minas$`Tipo de evento` <- tolower(minas$`Tipo de evento`)
minas <- minas[, -c(4, 7, 8, 11, 12)]
minas1 <- dcast(minas, departamento + municipio + mes + Año + cod_dane_depto + cod_dane_muni ~ `Tipo de evento`)
colnames(minas1) <- c("nombredepto", "nombrempio", "mes", "year", "coddepto", "codmpio", "accidente_map",
"accidente_muse", "arsenal_almacenada", "desminado_militar", "incautaciones",
"municiones_sinexplotar", "produccion_fabrica", "sospecha_campominado")
write.dta(minas1, "C:/Users/juanf/Dropbox/DNP - OIM/Conflictividades/Datos/map.dta")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(MASS)
houses <- Boston
str(houses)
sum(is.na(houses$medv))
matrix <- model.matrix(medv ~ ., houses)
y <- houses$medv
View(matrix)
matrix <- model.matrix(medv ~ ., houses)[, -1]
y <- houses$medv
View(matrix)
#install.packages("glmnet")
library(glmnet)
grid=10^seq(10,-2,length=100)
ridge <- glmnet(matrix[train,], y[train], alpha=0, lambda = grid)
grid=10^seq(10,-2,length=100)
set.seed (123)
train = sample(1:nrow(houses), nrow(houses)/2)
test = (-train)
y_test= y[test]
matrix <- model.matrix(medv ~ ., houses)[, -1]
y <- houses$medv
set.seed (123)
train = sample(1:nrow(houses), nrow(houses)/2)
test = (-train)
y_test= y[test]
#install.packages("glmnet")
library(glmnet)
ridge <- glmnet(matrix[train,], y[train], alpha=0, lambda = grid)
plot(ridge, xvar = "lambda")
cv_ridge <- cv.glmnet(matrix[train,], y[train], alpha=0)
plot(cv_ridge)
lambda_optimo <- cv_ridge$lambda.min
lambda_optimo
op_ridge <- glmnet(matrix[train,], y[train], alpha=0, lambda = lambda_optimo)
coef(op_ridge)
predictions <- predict(op_ridge, matrix[test,])
#install.packages("caret")
library(caret)
RMSE(predictions, y_test)
lasso <- glmnet(matrix[train,], y[train], alpha=1, lambda = grid)
plot(lasso, xvar = "lambda")
cv_lasso <- cv.glmnet(matrix[train,], y[train], alpha=1)
plot(cv_lasso)
lambda_optimo <- cv_lasso$lambda.min
lambda_optimo
op_lasso <- glmnet(matrix[train,], y[train], alpha=0, lambda = lambda_optimo)
coef(op_lasso)
predictions_lasso <- predict(op_lasso, matrix[test,])
#install.packages("caret")
library(caret)
RMSE(predictions_lasso, y_test)
hist(houses$medv)
set.seed(123)
train_sample <- sample(nrow(houses), nrow(houses)*0.8)
house_train <- houses[train_sample,]
house_test <- houses[-train_sample,]
#install.packages("rpart")
library(rpart)
model_train <- rpart(medv ~ ., data = houses)
model_train
#install.packages("rpart.plot")
library(rpart.plot)
rpart.plot(model_train)
plotcp(model_train)
completo <- rpart(medv ~ .,data = houses,  control = list(cp = 0))
plotcp(completo)
arbol_predict <- predict(model_train, house_test)
MAE <- function(actual, predicted){
mean(abs(actual-predicted))
}
MAE(house_test$medv, arbol_predict)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
edge_list <- tibble(from = c(1, 2, 2, 3, 4), to = c(2, 3, 4, 2, 1))
node_list <- tibble(id = 1:4)
edge_list
node_list
setwd("C:/Users/juanf/Dropbox/BigData_2020_1")
setwd("C:/Users/juanf/Dropbox/BigData_2020_1/Semana 10 - Network analysis")
library(readxl)
letters <- read_excel("correspondence-data-1585.xlsx")
letters
sources <- letters %>%
distinct(source) %>%
rename(label = source)
sources
destinations <- letters %>%
distinct(destination) %>%
rename(label = destination)
destinations
nodes <- full_join(sources, destinations, by = "label")
nodes
nodes <- nodes %>% rowid_to_column("id")
nodes
per_route <- letters %>%
group_by(source, destination) %>%
summarise(weight = n()) %>%
ungroup()
per_route
edges <- edges %>%
left_join(nodes, by = c("destination" = "label")) %>%
rename(to = id)
edges <- per_route %>%
left_join(nodes, by = c("source" = "label")) %>%
rename(from = id)
edges
edges <- edges %>%
left_join(nodes, by = c("destination" = "label")) %>%
rename(to = id)
edges
edges <- select(edges, from, to, weight)
edges
#install.packages("network")
library(network)
edges <- select(edges, from, to, weight)
edges
routes_network <- network(edges, vertex.attr = nodes, matrix.type = "edgelist", ignore.eval = FALSE)
routes_network
plot(routes_network, vertex.cex = 3)
plot(routes_network, vertex.cex = 3, mode = "circle")
detach(package:network)
rm(routes_network)
#install.packages("igraph")
library(igraph)
routes_igraph <- graph_from_data_frame(d = edges, vertices = nodes, directed = TRUE)
plot(routes_igraph, edge.arrow.size = 0.5)
plot(routes_igraph, edge.arrow.size = 0.7)
plot(routes_igraph, edge.arrow.size = 0.3)
plot(routes_igraph, layout = layout_with_graphopt, edge.arrow.size = 0.5)
plot(routes_igraph, layout = layout_with_graphopt, edge.arrow.size = 0.5)
plot(routes_igraph, layout = layout_with_graphopt, edge.arrow.size = 0.5)
plot(routes_igraph, layout = layout_with_graphopt, edge.arrow.size = 0.5)
#seed
plot(routes_igraph, layout = layout_with_graphopt, edge.arrow.size = 0.5)
#install.packages("tidygraph")
library(tidygraph)
#install.packages("ggraph")
library(ggraph)
routes_tidy <- tbl_graph(nodes = nodes, edges = edges, directed = TRUE)
routes_tidy
class(routes_tidy)
ggraph(routes_tidy) + geom_edge_link() + geom_node_point() + theme_graph()
ggraph(routes_tidy, layout = "graphopt") +
geom_node_point() +
geom_edge_link(aes(width = weight), alpha = 0.8) +
scale_edge_width(range = c(0.2, 2)) +
geom_node_text(aes(label = label), repel = TRUE) +
labs(edge_width = "Letters") +
theme_graph()
ggraph(routes_tidy, layout = "graphopt") +
geom_node_point() +
geom_edge_link(aes(width = weight), alpha = 0.8) +
scale_edge_width(range = c(0.2, 2)) +
geom_node_text(aes(label = label), repel = TRUE) +
labs(edge_width = "Letters") +
theme_graph()
ggraph(routes_tidy, layout = "graphopt") +
geom_node_point() +
geom_edge_link(aes(width = weight), alpha = 0.8) +
scale_edge_width(range = c(0.2, 2)) +
geom_node_text(aes(label = label), repel = TRUE) +
labs(edge_width = "Letters") +
theme_graph()
ggraph(routes_igraph, layout = "linear") +
geom_edge_arc(aes(width = weight), alpha = 0.8) +
scale_edge_width(range = c(0.2, 2)) +
geom_node_text(aes(label = label)) +
labs(edge_width = "Letters") +
theme_graph()
